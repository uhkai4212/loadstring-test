game:GetService("RunService").RenderStepped:Connect(function()
						debug.getupvalue(closure, upvalueIndex)[elementIndex] = value
					end)
				end

				-- Generated by Hydroxide's Upvalue Scanner: https://github.com/Upbolt/Hydroxide

				local aux = loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/Upbolt/Hydroxide/revision/ohaux.lua"))()

				local Tool = game:GetService("Players").LocalPlayer.Character:FindFirstChild("rageblade")
				if Tool then
					local scriptPath = Tool:FindFirstChild("rageblade") -- Hier ist der error von Gestern.
					local closureName = "Unnamed function"
					local upvalueIndex = 1
					local closureConstants = {
						[1] = "isHitting",
						[2] = "getLivingEntityFromChildPart",
						[3] = "attemptHit"
					}

					local closure = aux.searchClosure(scriptPath, closureName, upvalueIndex, closureConstants)
					local value = 4
					local elementIndex = "speed"


					debug.getupvalue(closure, upvalueIndex)[elementIndex] = value

					BypassedSowrd = true
				end

			end
		end

		if ANTICONSOLEWARNLOGANIMATION2 == false then
			ANTICONSOLEWARNLOGANIMATION2 = true
			task.spawn(function()
				for i,v in pairs(game:GetService('Players'):GetChildren()) do
					if v and v.Character and v.Character:FindFirstChild("Humanoid") then
						Player = v.Name
						AnimationId = "5328169716"
						local Anim = Instance.new("Animation")
						Anim.AnimationId = "rbxassetid://"..AnimationId
						local k = game.Players[Player].Character.Humanoid:LoadAnimation(Anim)
						k:Play() --Play the animation
						k:AdjustSpeed(0)
					end
				end
				wait(5)
				ANTICONSOLEWARNLOGANIMATION2 = false
			end)
		end	

		-- game.Players.LocalPlayer.Character:MoveTo(NM:FindFirstChild("HumanoidRootPart").Position)

		local function findNearestMob(A)
			closestPart = nil
			closestDistance = math.huge
			playerPosition = game.Players.LocalPlayer.Character.HumanoidRootPart.Position

			Table = A

			for i, part in ipairs(Table) do
				if part:FindFirstChild("HumanoidRootPart") then
					local distance = (part:FindFirstChild("HumanoidRootPart").Position - playerPosition).magnitude
					if distance < closestDistance then
						closestPart = part
						closestDistance = distance
					end
				end
			end

			return closestPart
		end

		local Mobs = workspace.WildernessIsland.Entities:GetChildren()

		SelectedMob = findNearestMob(Mobs)

		local args = {
			[1] = Hash(),
			[2] = {
				[1] = {
					[MotHitH1] = MotHitH2,
					["hitUnit"] = SelectedMob
				}
			}
		}

		game:GetService("ReplicatedStorage").rbxts_include.node_modules:FindFirstChild("@rbxts").net.out._NetManaged:FindFirstChild(RemoteData:FindFirstChild("KillRemote").Value):FireServer(unpack(args))

		task.wait(0.4)
		KILLAURA_COOLDOWN = false
	end
end

local TreeAuraCooldown = false
function TreeAura()
	if TreeAuraCooldown == false then
		TreeAuraCooldown = true
		local distance = 30
		local NSEL
		if _G.SelectedTree == "all" then
			NSEL = "tree"
		else
			NSEL = _G.SelectedTree
		end 


		for i,v in pairs(workspace.Islands:GetDescendants()) do
			if v.Name == "Owners" then 
				if v:FindFirstChild(_G.Island_USERID) then 
					for i,v in pairs(v.Parent.Blocks:GetChildren()) do
						local NekoHub_on_TOP = string.sub(v.Name:lower(), 1, string.len(NSEL))
						if string.match(v.Name, NSEL) then 
							local mag = (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - v.Position).Magnitude
							if mag < distance then 

								task.wait(0.3)

								if _G.TreeAura == true then

									local ohTable1 = {
										[HitHASHName] = HitHASH,
										["part"] = TFOUND,
										["block"] = v,
										["norm"] = Vector3.new(v.CFrame),
										["pos"] = v.Position
									}
									game:GetService("ReplicatedStorage").rbxts_include.node_modules["@rbxts"].net.out._NetManaged.CLIENT_BLOCK_HIT_REQUEST:InvokeServer(ohTable1)
								end
							end
						end
					end
				end
			end
		end
		task.wait(0.2)
		TreeAuraCooldown = false
	end
end

local voidParasiteFarmBypassCooldown2 = 0
local voidParasiteFarmBypassCooldown = 0
local voidParasiteFarmCooldown = false
function voidParasiteFarm(value)
	if voidParasiteFarmCooldown == false then
		voidParasiteFarmCooldown = true

		local voidParasiteFarmTable = {}

		for i,v in pairs(game:GetService("Workspace").WildernessBlocks:GetChildren()) do 
			if v.Name == "voidParasite" then
				table.insert(voidParasiteFarmTable, v)
			end
		end

		local function findNearestPart(A)
			local closestPart = nil
			local closestDistance = math.huge
			local playerPosition = game.Players.LocalPlayer.Character.HumanoidRootPart.Position

			local Table = A

			for i, part in ipairs(Table) do
				local distance = (part.Position - playerPosition).magnitude
				if distance < closestDistance then
					closestPart = part
					closestDistance = distance
				end
			end

			DebugCheck(0,"findNearestPart")

			return closestPart
		end

		local TargeVoidParasite = findNearestPart(voidParasiteFarmTable)


		if not TargeVoidParasite then voidParasiteFarmCooldown = false return end


		local H1 = RemoteData:FindFirstChild("CropHashData").Value
		local H2 = _G.CropHash


		local ohTable1 = {
			[H1] = H2,
			["player"] = game:GetService("Players").LocalPlayer,
			["model"] = TargeVoidParasite
		}

		local args = {
			[1] = "sickleStone",
			[2] = {
				[1] = TargeVoidParasite
			}
		}

		voidParasiteFarmBypassCooldown = voidParasiteFarmBypassCooldown + 1
		TeleportV4(TargeVoidParasite.Position + Vector3.new(0,3,0))
		if _G.VoidParasiteBypass == true then
			DebugCheck(0,"voidParasiteFarmBypassCooldown:"..voidParasiteFarmBypassCooldown)
			DebugCheck(0,"voidParasiteFarmBypassCooldown2:"..voidParasiteFarmBypassCooldown2)
			if voidParasiteFarmBypassCooldown < 21 then
				voidParasiteFarmBypassCooldown2 = 0
				game:GetService("ReplicatedStorage").rbxts_include.node_modules:FindFirstChild("@rbxts").net.out._NetManaged.SwingSickle:InvokeServer(unpack(args))
			else
				if voidParasiteFarmBypassCooldown2 > 21 then
					voidParasiteFarmBypassCooldown = 0
				else
					voidParasiteFarmBypassCooldown2 = voidParasiteFarmBypassCooldown2 + 1
					game:GetService("ReplicatedStorage").rbxts_include.node_modules:FindFirstChild("@rbxts").net.out._NetManaged.CLIENT_HARVEST_CROP_REQUEST:InvokeServer(ohTable1)
				end
			end
		else
			if _G.VoidParasiteSichle == true then
				game:GetService("ReplicatedStorage").rbxts_include.node_modules:FindFirstChild("@rbxts").net.out._NetManaged.SwingSickle:InvokeServer(unpack(args))
			else
				game:GetService("ReplicatedStorage").rbxts_include.node_modules:FindFirstChild("@rbxts").net.out._NetManaged.CLIENT_HARVEST_CROP_REQUEST:InvokeServer(ohTable1)
			end
		end		
		voidParasiteFarmCooldown = false
	end

end

local function spiritfindNearestPart(A)
	print("spiritfindNearestPart")
	local closestPart = nil
	local closestDistance = math.huge
	local playerPosition = game.Players.LocalPlayer.Character.HumanoidRootPart.Position

	local Table = A

	for i, Model in ipairs(Table) do
		if Model:FindFirstChild("HumanoidRootPart") then
			local part = Model:FindFirstChild("HumanoidRootPart")
			if Model.Name == "spirit"  then
				local distance = (part.Position - playerPosition).magnitude
				if distance < closestDistance then
					closestPart = Model
					closestDistance = distance
				end
			end
		end

	end

	print("return wÃ¤re:",closestPart)

	return closestPart
end

	local spiritFarmCooldown = false
	function spiritFarm(value)
		if spiritFarmCooldown then
			return
		end
		spiritFarmCooldown = true

		if not _G.SpiritAutoFarmBool then
			return
		end



		local Entities = workspace.WildernessIsland.Entities:GetChildren()
		local KIND = spiritfindNearestPart(Entities)

		if KIND then
			if KIND.HumanoidRootPart.Position.Y <= -50 then
				KIND:Destroy()
			else
				local HttpService = game:GetService("HttpService")
				local Abd = HttpService:GenerateGUID(false) .. HttpService:GenerateGUID(false) .. HttpService:GenerateGUID(false)
				local args = {
					[1] = Abd,
					[2] = {
						[1] = {
							entity = KIND
						}
					}
				}

				local player = game.Players.LocalPlayer
				local net = game:GetService("ReplicatedStorage").rbxts_include.node_modules["@rbxts"].net
				local backpack = player.Backpack:FindFirstChild("net")
				local netParent = player.Character:FindFirstChild("net") or (backpack and backpack.Parent)

				if not netParent then
					if backpack then
						backpack.Parent = player.Character
					end
					netParent = player.Character
				end

				TeleportV4(KIND.HumanoidRootPart.Position + Vector3.new(0, 1, 5))

				pcall(function()
					net.out._NetManaged[RemoteData.SpiritRemote.Value]:FireServer(unpack(args))
				end)
			end
		end	



		task.wait(0.25)

		spiritFarmCooldown = false

	end



	local SICHLECROPFARMCOOLDOWN = false
	local Harvesting = false

	local MAXDISCROPSICHLE = 30

	local GOTACROPTAGET = false

	local function SichleCropFarm(SOLLICHAUCHTELEPORTENODERNICHT)
		DebugCheck(0,"SichleCropFarm")
		if SICHLECROPFARMCOOLDOWN == false then
			SICHLECROPFARMCOOLDOWN = true

			if _G.SuperFastCropFarm == true then
				BlocksPerCall = 40
			else
				BlocksPerCall = 30
			end

			local Players = game:GetService("Players")
			local LocalPlayer = Players.LocalPlayer
			local Workspace = game:GetService("Workspace")
			local Islands = Workspace.Islands
			local ReplicatedStorage = game:GetService("ReplicatedStorage")
			local RunService = game:GetService("RunService")
			local SelectedCrop = _G.SelectedCrop
			local Island_USERID = _G.Island_USERID
			local UseSichleTool = _G.UseSichleTool

			-- Deaktivieren des experience-listener-Moduls